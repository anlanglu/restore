from time import *
from usbfunc import *
from subfunc import *
from ctypes import *
import random
import os

##length      = 1


# this code implements history
import atexit
import os
import readline
import rlcompleter
if 'libedit' in readline.__doc__:
    readline.parse_and_bind("bind ^I rl_complete")
else:
    readline.parse_and_bind("tab: complete")
historyPath = os.path.expanduser("./.pyhistory")
def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)
if os.path.exists(historyPath):
    readline.read_history_file(historyPath)
def hist():
    for i in range(readline.get_current_history_length()):
        print readline.get_history_item(i + 1)
atexit.register(save_history)
del atexit, readline, rlcompleter, save_history, historyPath
#del os, atexit, readline, rlcompleter, save_history, historyPath

from aardvark_py import *
import sys
import time

try:
	opts, args = getopt.getopt(sys.argv[1:], "hf:", ["help","fin="])

	if not opts:
		raise getopt.GetoptError, '\nError: Not enough arguments\n'
	for opt, a in opts:
		if opt in ("-h","--help"):
			print usage
			sys.exit(0)
		elif opt in ("-f","--fin"):
			fin = a
		else:
			raise getopt.GetoptError, '\nError: Not enough arguments\n'

	if args:
		raise getopt.GetoptError, '\nError: Too many arguments\n'

except getopt.GetoptError, msg:
#	print usage
	sys.exit(2)

f = file(fin, "read") # read in file to f

BUS_TIMEOUT = 150  # ms

port = 0
#port = int(sys.argv[1])
handle = aa_open(port)
print handle
aa_configure(handle,  AA_CONFIG_SPI_I2C)
aa_i2c_pullup(handle, AA_I2C_PULLUP_BOTH)
bitrate = 400
aa_spi_configure(handle, 0, 0, AA_SPI_BITORDER_MSB)
aa_spi_bitrate(handle, bitrate)
bus_timeout = aa_i2c_bus_timeout(handle, BUS_TIMEOUT)
print "Bus lock timeout set to %d ms" % bus_timeout

bitrate = aa_i2c_bitrate(handle, bitrate)

print "Bitrate set to %d kHz" % bitrate

slave_addr = 0x10

device = 0x08
addr = 0x0
length = 16
print addr, device, length


##spi_addr_init = 0x000000
erase_cmd = 0x20  ##0x20:4KB erase for 3-byte addr, 0x52:32KB, 0xd8:64KB
wen_cmd   = 0x06
rdsr_cmd  = 0x05
Write_CMD = 0x02

multi_io_mode = 0    ## for Boot ROM, multi_io_mode should always be 0

if(multi_io_mode == 0):    ##single-bit mode
    Read_CMD         = 0x0b
    addr_dummy_num   = 0x08
    addr_dummy_value = 0x00
elif(multi_io_mode == 2):  ##Dual IO mode
    Read_CMD         = 0xbb
    addr_dummy_num   = 0x04
    addr_dummy_value = 0xf0
elif(multi_io_mode == 3):  ##Dual Output mode
    Read_CMD         = 0x3b
    addr_dummy_num   = 0x08
    addr_dummy_value = 0x00
else:
    print "!!!Dual Mode(2-2-2) is not supported!!!"
    sys.exit(0)


WriteDP835Reg(0x10,0x3c,0x04,0x0c)

##SPI_ADDR=0

def spi_fifo0_init():
    WriteDP835Reg(0x10,0x3c,0x10,0x2c)
    WriteDP835Reg(0x10,0x3c,0x11,0x08)
    WriteDP835Reg(0x10,0x3c,0x14,0x01)
    WriteDP835Reg(0x10,0x3c,0x15,0x01)

def spi_fifo1_init():
    WriteDP835Reg(0x10,0x40,0x7c,0x2c)
    WriteDP835Reg(0x10,0x40,0x7d,0x08)
    WriteDP835Reg(0x10,0x40,0x80,0x01)
    WriteDP835Reg(0x10,0x40,0x81,0x01)

def setctor_erase_fifo0(spi_addr_init):
    addr_byte2 = (spi_addr_init>>16) & 0xff
    addr_byte1 = (spi_addr_init>>8) & 0xff
    addr_byte0 = spi_addr_init & 0xff
    spi_fifo0_init()
    WriteDP835Reg(0x10,0x3c,0x18,0x00)
    WriteDP835Reg(0x10,0x3c,0x19,0x81)
    WriteDP835Reg(0x10,0x3c,0x1c,erase_cmd)
    WriteDP835Reg(0x10,0x3c,0x1d,0xc1)
    WriteDP835Reg(0x10,0x3c,0x1e,0x58)
    WriteDP835Reg(0x10,0x3c,0x20,0x02)
    WriteDP835Reg(0x10,0x3c,0x21,0x00)
    WriteDP835Reg(0x10,0x3c,0x30,addr_byte2)
    WriteDP835Reg(0x10,0x3c,0x31,addr_byte1)
    WriteDP835Reg(0x10,0x3c,0x32,addr_byte0)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    print 'Subsetctor Erase is in progress'

def setctor_erase_fifo1(spi_addr_init):
    addr_byte2 = (spi_addr_init>>16) & 0xff
    addr_byte1 = (spi_addr_init>>8) & 0xff
    addr_byte0 = spi_addr_init & 0xff
    spi_fifo1_init()
    WriteDP835Reg(0x10,0x40,0x84,0x00)
    WriteDP835Reg(0x10,0x40,0x85,0x81)
    WriteDP835Reg(0x10,0x40,0x88,erase_cmd)
    WriteDP835Reg(0x10,0x40,0x89,0xc1)
    WriteDP835Reg(0x10,0x40,0x8a,0x58)
    WriteDP835Reg(0x10,0x40,0x8c,0x02)
    WriteDP835Reg(0x10,0x40,0x8d,0x00)
    WriteDP835Reg(0x10,0x40,0x98,addr_byte2)
    WriteDP835Reg(0x10,0x40,0x99,addr_byte1)
    WriteDP835Reg(0x10,0x40,0x9a,addr_byte0)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    print 'Subsetctor Erase is in progress'

def write_enable_fifo0():
    spi_fifo0_init()
    WriteDP835Reg(0x10,0x3c,0x18,0x00)
    WriteDP835Reg(0x10,0x3c,0x19,0x81)
    WriteDP835Reg(0x10,0x3c,0x1d,0xc0)
    WriteDP835Reg(0x10,0x3c,0x1e,0x58)
    WriteDP835Reg(0x10,0x3c,0x20,0x00)
    WriteDP835Reg(0x10,0x3c,0x21,0x00)
    WriteDP835Reg(0x10,0x3c,0x30,wen_cmd)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    print 'Write Enable CMD'

def write_enable_fifo1():
    spi_fifo1_init()
    WriteDP835Reg(0x10,0x40,0x84,0x00)
    WriteDP835Reg(0x10,0x40,0x85,0x81)
    WriteDP835Reg(0x10,0x40,0x89,0xc0)
    WriteDP835Reg(0x10,0x40,0x8a,0x58)
    WriteDP835Reg(0x10,0x40,0x8c,0x00)
    WriteDP835Reg(0x10,0x40,0x8d,0x00)
    WriteDP835Reg(0x10,0x40,0x98,wen_cmd)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    print 'Write Enable CMD'

def rdsr_fifo0():
    spi_fifo0_init()
    global STATUS_REG
    WriteDP835Reg(0x10,0x3c,0x18,0x00)
    WriteDP835Reg(0x10,0x3c,0x19,0x81)
    WriteDP835Reg(0x10,0x3c,0x1c,rdsr_cmd)
    WriteDP835Reg(0x10,0x3c,0x1d,0xc1)
    WriteDP835Reg(0x10,0x3c,0x1e,0x40)
    WriteDP835Reg(0x10,0x3c,0x20,0x00)
    WriteDP835Reg(0x10,0x3c,0x21,0x00)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    STATUS_REG = ReadDP835Reg(0x10,0x3c,0x30)

def rdsr_clr_fifo0():
    spi_fifo0_init()
    global STATUS_REG
    WriteDP835Reg(0x10,0x3c,0x18,0x00)
    WriteDP835Reg(0x10,0x3c,0x19,0x81)
    WriteDP835Reg(0x10,0x3c,0x1c,rdsr_cmd)
    WriteDP835Reg(0x10,0x3c,0x1d,0xc1)
    WriteDP835Reg(0x10,0x3c,0x1e,0x00)
    WriteDP835Reg(0x10,0x3c,0x20,0x00)
    WriteDP835Reg(0x10,0x3c,0x21,0x00)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    STATUS_REG = ReadDP835Reg(0x10,0x3c,0x30)

def rdsr_fifo1():
    spi_fifo1_init()
    global STATUS_REG
    WriteDP835Reg(0x10,0x40,0x84,0x00)
    WriteDP835Reg(0x10,0x40,0x85,0x81)
    WriteDP835Reg(0x10,0x40,0x88,rdsr_cmd)
    WriteDP835Reg(0x10,0x40,0x89,0xc1)
    WriteDP835Reg(0x10,0x40,0x8a,0x40)
    WriteDP835Reg(0x10,0x40,0x8c,0x00)
    WriteDP835Reg(0x10,0x40,0x8d,0x00)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    STATUS_REG = ReadDP835Reg(0x10,0x40,0x98)

def rdsr_clr_fifo1():
    spi_fifo1_init()
    global STATUS_REG
    WriteDP835Reg(0x10,0x40,0x84,0x00)
    WriteDP835Reg(0x10,0x40,0x85,0x81)
    WriteDP835Reg(0x10,0x40,0x88,rdsr_cmd)
    WriteDP835Reg(0x10,0x40,0x89,0xc1)
    WriteDP835Reg(0x10,0x40,0x8a,0x00)
    WriteDP835Reg(0x10,0x40,0x8c,0x00)
    WriteDP835Reg(0x10,0x40,0x8d,0x00)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    STATUS_REG = ReadDP835Reg(0x10,0x40,0x98)

def spi_fifo0_write(spi_addr_init, buf, start, length):
##    addr_byte2 = (spi_addr_init>>16) & 0xff
##    addr_byte1 = (spi_addr_init>>8) & 0xff
##    addr_byte0 = spi_addr_init & 0xff
    spi_fifo0_init()
##    f_write=open('FIFO0_DATA_WRITE.txt','w')
##    for j in range(length*4):
    write_enable_fifo0()
##        SPI_ADDR=j*256 + spi_addr_init
    for k in range(0,length):
        FIFO0_ADDR=k + 0x3c30
##            data=int(random.random()*255)& 0xff
        WriteDP835Reg(0x10,FIFO0_ADDR>>8, FIFO0_ADDR&0xff,int(buf[k+start]))
##            f_write.writelines(hex(data)[2:].zfill(2))
##            f_write.writelines('\n')
    WriteDP835Reg(0x10,0x3c,0x1c,Write_CMD)
    WriteDP835Reg(0x10,0x3c,0x1d,0x81)
    WriteDP835Reg(0x10,0x3c,0x1e,0x5b)
    WriteDP835Reg(0x10,0x3c,0x20,length-1) ##one SPI write max length is 256
    WriteDP835Reg(0x10,0x3c,0x21,0x00)
    WriteDP835Reg(0x10,0x3c,0x24,spi_addr_init&0xff)
    WriteDP835Reg(0x10,0x3c,0x25,(spi_addr_init>>8)&0xff)
    WriteDP835Reg(0x10,0x3c,0x26,(spi_addr_init>>16)&0xff)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    while(1):
        SPI_STATUS_FIFO0 = ReadDP835Reg(0x10,0x40,0x70)
        SPI_BUSY_FLAG_FIFO0 = SPI_STATUS_FIFO0 & 0x01
        if(SPI_BUSY_FLAG_FIFO0 == 0x01):
            print "!!!SPI BUS is busy!!!"
        else:
            print '***SPI Write Round is done***'
            break
##    f_write.close()

def spi_fifo1_write(spi_addr_init,buf,start,  length):
##    addr_byte2 = (spi_addr_init>>16) & 0xff
##    addr_byte1 = (spi_addr_init>>8) & 0xff
##    addr_byte0 = spi_addr_init & 0xff
    spi_fifo1_init()
##    f_write=open('FIFO1_DATA_WRITE.txt','w')
##    for j in range(length):
    write_enable_fifo1()
##        SPI_ADDR=j*256 + spi_addr_init
    for k in range(0,length):
        FIFO1_ADDR=k + 0x4098
##            data=int(random.random()*255)& 0xff
        WriteDP835Reg(0x10,FIFO1_ADDR>>8, FIFO1_ADDR&0xff,ord(buf[k+start]))
##            f_write.writelines(hex(data)[2:].zfill(2))
##            f_write.writelines('\n')
    WriteDP835Reg(0x10,0x40,0x88,Write_CMD)
    WriteDP835Reg(0x10,0x40,0x89,0x81)
    WriteDP835Reg(0x10,0x40,0x8a,0x5b)
    WriteDP835Reg(0x10,0x40,0x8c,length-1) ##one SPI write max length is 256
    WriteDP835Reg(0x10,0x40,0x8d,0x00)
    WriteDP835Reg(0x10,0x40,0x90,spi_addr_init&0xff)
    WriteDP835Reg(0x10,0x40,0x91,(spi_addr_init>>8)&0xff)
    WriteDP835Reg(0x10,0x40,0x92,(spi_addr_init>>16)&0xff)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    while(1):
        SPI_STATUS_FIFO1 = ReadDP835Reg(0x10,0x44,0xd8)
        SPI_BUSY_FLAG_FIFO1 = SPI_STATUS_FIFO1 & 0x01
        if(SPI_BUSY_FLAG_FIFO1 == 0x01):
            print "!!!SPI BUS is busy!!!"
        else:
            print '***SPI Write Round is done***'
            break
##    f_write.close()



def spi_fifo0_read(spi_addr_init, length):
    addr_byte2 = (spi_addr_init>>16) & 0xff
    addr_byte1 = (spi_addr_init>>8) & 0xff
    addr_byte0 = spi_addr_init & 0xff
    length_high = ((length-1)>>8) & 0xff
    length_low = (length-1) & 0xff
    spi_fifo0_init()
    WriteDP835Reg(0x10,0x3c,0x18,addr_dummy_num)
    WriteDP835Reg(0x10,0x3c,0x19,0x81)
    WriteDP835Reg(0x10,0x3c,0x1c,Read_CMD)
    WriteDP835Reg(0x10,0x3c,0x1d,0x01)
    WriteDP835Reg(0x10,0x3c,0x1e,0x03)
    WriteDP835Reg(0x10,0x3c,0x20,length_low)
    WriteDP835Reg(0x10,0x3c,0x21,length_high)
    WriteDP835Reg(0x10,0x3c,0x22,addr_dummy_value)
    WriteDP835Reg(0x10,0x3c,0x24,addr_byte0)
    WriteDP835Reg(0x10,0x3c,0x25,addr_byte1)
    WriteDP835Reg(0x10,0x3c,0x26,addr_byte2)
    WriteDP835Reg(0x10,0x3c,0x28,0x01)
    while(1):
        SPI_STATUS_FIFO0 = ReadDP835Reg(0x10,0x40,0x70)
        SPI_BUSY_FLAG_FIFO0 = SPI_STATUS_FIFO0 & 0x01
        if(SPI_BUSY_FLAG_FIFO0 == 0x01):
            print "!!!SPI BUS is busy!!!"
        else:
            print "SPI transaction is done"
            break
    for i in range(length):
        FIFO0_ADDR = 0x3c30 + i ##0x3c30 is SRAM0 base addr
        FIFO0_DATA = ReadDP835Reg(0x10,(FIFO0_ADDR>>8)&0xff,FIFO0_ADDR&0xff)
        Temp[i] = FIFO0_DATA
        if(Write_SPI == 1):
            print "Rdata 0x%06x=0x%02x" %(spi_addr_init + i,FIFO0_DATA)

    for i in range(length):
        print"%02x" %(Temp[i]),
    print" "

def spi_fifo1_read(spi_addr_init, length):
    addr_byte2 = (spi_addr_init>>16) & 0xff
    addr_byte1 = (spi_addr_init>>8) & 0xff
    addr_byte0 = spi_addr_init & 0xff
    length_high = (length>>8) & 0xff
    length_low = length & 0xff
    spi_fifo1_init()
    WriteDP835Reg(0x10,0x40,0x84,addr_dummy_num)
    WriteDP835Reg(0x10,0x40,0x85,0x81)
    WriteDP835Reg(0x10,0x40,0x88,Read_CMD)
    WriteDP835Reg(0x10,0x40,0x89,0x01)
    WriteDP835Reg(0x10,0x40,0x8a,0x03)
    WriteDP835Reg(0x10,0x40,0x8c,length_low)
    WriteDP835Reg(0x10,0x40,0x8d,length_high)
    WriteDP835Reg(0x10,0x40,0x8e,addr_dummy_value)
    WriteDP835Reg(0x10,0x40,0x90,addr_byte0)
    WriteDP835Reg(0x10,0x40,0x91,addr_byte1)
    WriteDP835Reg(0x10,0x40,0x92,addr_byte2)
    WriteDP835Reg(0x10,0x40,0x94,0x01)
    while(1):
        SPI_STATUS_FIFO1 = ReadDP835Reg(0x10,0x44,0xd8)
        SPI_BUSY_FLAG_FIFO1 = SPI_STATUS_FIFO1 & 0x01
        if(SPI_BUSY_FLAG_FIFO1 == 0x01):
            print "!!!SPI BUS is busy!!!"
        else:
            print "SPI transaction is done"
            break
##    file_read = 'FIFO1_DATA_READ.txt'
##    fp = open(file_read, 'w')
    for i in range(length):
        FIFO1_ADDR = 0x4098 + i ##0x4098 is SRAM1 base addr
        FIFO1_DATA = ReadDP835Reg(0x10,(FIFO1_ADDR>>8)&0xff,FIFO1_ADDR&0xff)
        print "Rdata 0x%06x=0x%02x" %(spi_addr_init + i,FIFO1_DATA)
##        fp.writelines(hex(FIFO1_DATA)[2:].zfill(2))
##        fp.writelines('\n')
##    fp.close()



# ##########################


Data = [0xff,0xff,0xff,0xff,  0xff,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,    0xff,0xFF,0xFF,0xFF,]
Temp = [0xff,0xff,0xff,0xff,  0xff,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,    0xff,0xFF,0xFF,0xFF,]

####
Write_SPI = 1

length = 20

##FW bundle address
Bundle_a = 0x0000
Bundle_b = 0x1000

## FW_A has valid FW pointer
## FW_B has valid FW pointer
##data_A = [0x00,0x00,0x20,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,    0x00,0xFF,0x55,0x08,]
##data_B = [0x00,0x01,0x10,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,    0x00,0xFF,0x55,0x08,]

## FW_A has valid FW pointer
## FW_B has invalid FW pointer
data_A = [0x00,0x00,0x20,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0x00,0xFF,0x55,0x08,]
data_B = [0x00,0x01,0x10,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0xff,0xFF,0xFF,0xFF,]

## FW_A has invalid FW pointer
## FW_B has valid FW pointer
##data_A = [0x00,0x00,0x20,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0xff,0xFF,0xFF,0xFF,]
##data_B = [0x00,0x01,0x10,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0x00,0xFF,0x55,0x08,]

## FW_A has invalid FW pointer
## FW_B has invalid FW pointer
##data_A = [0x00,0x00,0x20,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0xff,0xFF,0xFF,0xFF,]
##data_B = [0x00,0x01,0x10,0x00,  0x03,0xFF,0xFF,0xFF,    0x00,0x00,0x00,0x00,    0x12,0x34,0x56,0x78,     0xff,0xFF,0xFF,0xFF,]

Addr = Bundle_a
##Addr = Bundle_b

# if( Addr == Bundle_a):
#     Data = data_A
#     print " Bundle A:"
# else:
#     Data = data_B
#     print " Bundle B:"

Data = []

for s in f:
    Data.append(int(s[0:2],16))

##for i in range(length):
##    print "Data : 0x%02x=0x%02x" %(i , Data[i])

####****** I2C Access REG init ******
WriteDP855Reg(0x10,0x7900,0x01)
WriteDP855Reg(0x10,0x7901,0x00)
WriteDP855Reg(0x10,0x7808,0xff)
# ########################## image file

if(Write_SPI == 1):
    write_enable_fifo0()
    sleep(0.1)

    setctor_erase_fifo0( Addr )
    sleep(0.5)

    spi_fifo0_write(Addr, Data, 0, length )
    sleep(0.1)
    spi_fifo0_read(Addr,length)
    ##spi_fifo0_read(0x20400,length-0x400)
else:
    print " Read Bundle A:"
    spi_fifo0_read(Bundle_a,length)
    print " Read Bundle B:"
    spi_fifo0_read(Bundle_b,length)
